/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.davis.client.api;

import com.davis.client.ApiCallback;
import com.davis.client.ApiClient;
import com.davis.client.ApiException;
import com.davis.client.ApiResponse;
import com.davis.client.Configuration;
import com.davis.client.Pair;
import com.davis.client.ProgressRequestBody;
import com.davis.client.ProgressResponseBody;

import com.davis.client.model.HistoryEntity;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.davis.client.model.AboutEntity;
import com.davis.client.model.ActionEntity;
import com.davis.client.model.BannerEntity;
import com.davis.client.model.BulletinBoardEntity;
import com.davis.client.model.ControllerBulletinsEntity;
import com.davis.client.model.ControllerStatusEntity;
import com.davis.client.model.ComponentHistoryEntity;
import com.davis.client.model.ConnectionStatusEntity;
import com.davis.client.model.StatusHistoryEntity;
import com.davis.client.model.ControllerServiceTypesEntity;
import com.davis.client.model.ControllerServicesEntity;
import com.davis.client.model.CurrentUserEntity;
import com.davis.client.model.ProcessGroupFlowEntity;
import com.davis.client.model.FlowConfigurationEntity;
import com.davis.client.model.PortStatusEntity;
import com.davis.client.model.PrioritizerTypesEntity;
import com.davis.client.model.ProcessGroupStatusEntity;
import com.davis.client.model.ProcessorStatusEntity;
import com.davis.client.model.ProcessorTypesEntity;
import com.davis.client.model.ReportingTaskTypesEntity;
import com.davis.client.model.ReportingTasksEntity;
import com.davis.client.model.TemplatesEntity;
import com.davis.client.model.ScheduleComponentsEntity;
import com.davis.client.model.ClusterSearchResultsEntity;
import com.davis.client.model.SearchResultsEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlowApi {
    private ApiClient apiClient;

    public FlowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlowApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for generateClientId */
    private com.squareup.okhttp.Call generateClientIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws
            ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/client-id".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Generates a client id.
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String generateClientId() throws ApiException {
        ApiResponse<String> resp = generateClientIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Generates a client id.
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> generateClientIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = generateClientIdCall(null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generates a client id. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateClientIdAsync(final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateClientIdCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAboutInfo */
    private com.squareup.okhttp.Call getAboutInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/about".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves details about this NiFi to put in the About dialog
     * 
     * @return AboutEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AboutEntity getAboutInfo() throws ApiException {
        ApiResponse<AboutEntity> resp = getAboutInfoWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves details about this NiFi to put in the About dialog
     * 
     * @return ApiResponse&lt;AboutEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AboutEntity> getAboutInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAboutInfoCall(null, null);
        Type localVarReturnType = new TypeToken<AboutEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves details about this NiFi to put in the About dialog (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAboutInfoAsync(final ApiCallback<AboutEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAboutInfoCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AboutEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAction */
    private com.squareup.okhttp.Call getActionCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/history/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets an action
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param id The action id. (required)
     * @return ActionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionEntity getAction(String id) throws ApiException {
        ApiResponse<ActionEntity> resp = getActionWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets an action
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param id The action id. (required)
     * @return ApiResponse&lt;ActionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionEntity> getActionWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getActionCall(id, null, null);
        Type localVarReturnType = new TypeToken<ActionEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets an action (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param id The action id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionAsync(String id, final ApiCallback<ActionEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBanners */
    private com.squareup.okhttp.Call getBannersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/banners".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves the banners for this NiFi
     * 
     * @return BannerEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BannerEntity getBanners() throws ApiException {
        ApiResponse<BannerEntity> resp = getBannersWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the banners for this NiFi
     * 
     * @return ApiResponse&lt;BannerEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BannerEntity> getBannersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getBannersCall(null, null);
        Type localVarReturnType = new TypeToken<BannerEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the banners for this NiFi (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBannersAsync(final ApiCallback<BannerEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBannersCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BannerEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBulletinBoard */
    private com.squareup.okhttp.Call getBulletinBoardCall(String after, String sourceName, String message, String sourceId, String groupId, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/bulletin-board".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (after != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "after", after));
        if (sourceName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceName", sourceName));
        if (message != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "message", message));
        if (sourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceId", sourceId));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "groupId", groupId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets current bulletins
     * 
     * @param after Includes bulletins with an id after this value. (optional)
     * @param sourceName Includes bulletins originating from this sources whose name match this regular expression. (optional)
     * @param message Includes bulletins whose message that match this regular expression. (optional)
     * @param sourceId Includes bulletins originating from this sources whose id match this regular expression. (optional)
     * @param groupId Includes bulletins originating from this sources whose group id match this regular expression. (optional)
     * @param limit The number of bulletins to limit the response to. (optional)
     * @return BulletinBoardEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BulletinBoardEntity getBulletinBoard(String after, String sourceName, String message, String sourceId, String groupId, String limit) throws ApiException {
        ApiResponse<BulletinBoardEntity> resp = getBulletinBoardWithHttpInfo(after, sourceName, message, sourceId, groupId, limit);
        return resp.getData();
    }

    /**
     * Gets current bulletins
     * 
     * @param after Includes bulletins with an id after this value. (optional)
     * @param sourceName Includes bulletins originating from this sources whose name match this regular expression. (optional)
     * @param message Includes bulletins whose message that match this regular expression. (optional)
     * @param sourceId Includes bulletins originating from this sources whose id match this regular expression. (optional)
     * @param groupId Includes bulletins originating from this sources whose group id match this regular expression. (optional)
     * @param limit The number of bulletins to limit the response to. (optional)
     * @return ApiResponse&lt;BulletinBoardEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BulletinBoardEntity> getBulletinBoardWithHttpInfo(String after, String sourceName, String message, String sourceId, String groupId, String limit) throws ApiException {
        com.squareup.okhttp.Call call = getBulletinBoardCall(after, sourceName, message, sourceId, groupId, limit, null, null);
        Type localVarReturnType = new TypeToken<BulletinBoardEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets current bulletins (asynchronously)
     * 
     * @param after Includes bulletins with an id after this value. (optional)
     * @param sourceName Includes bulletins originating from this sources whose name match this regular expression. (optional)
     * @param message Includes bulletins whose message that match this regular expression. (optional)
     * @param sourceId Includes bulletins originating from this sources whose id match this regular expression. (optional)
     * @param groupId Includes bulletins originating from this sources whose group id match this regular expression. (optional)
     * @param limit The number of bulletins to limit the response to. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBulletinBoardAsync(String after, String sourceName, String message, String sourceId, String groupId, String limit, final ApiCallback<BulletinBoardEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBulletinBoardCall(after, sourceName, message, sourceId, groupId, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulletinBoardEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBulletins */
    private com.squareup.okhttp.Call getBulletinsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/controller/bulletins".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves Controller level bulletins
     * 
     * @return ControllerBulletinsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerBulletinsEntity getBulletins() throws ApiException {
        ApiResponse<ControllerBulletinsEntity> resp = getBulletinsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves Controller level bulletins
     * 
     * @return ApiResponse&lt;ControllerBulletinsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerBulletinsEntity> getBulletinsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getBulletinsCall(null, null);
        Type localVarReturnType = new TypeToken<ControllerBulletinsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves Controller level bulletins (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBulletinsAsync(final ApiCallback<ControllerBulletinsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBulletinsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerBulletinsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getClusterSummary */
    private com.squareup.okhttp.Call getClusterSummaryCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/cluster/summary".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the current status of this NiFi
     * 
     * @return ControllerStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerStatusEntity getClusterSummary() throws ApiException {
        ApiResponse<ControllerStatusEntity> resp = getClusterSummaryWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets the current status of this NiFi
     * 
     * @return ApiResponse&lt;ControllerStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerStatusEntity> getClusterSummaryWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getClusterSummaryCall(null, null);
        Type localVarReturnType = new TypeToken<ControllerStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the current status of this NiFi (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClusterSummaryAsync(final ApiCallback<ControllerStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClusterSummaryCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getComponentHistory */
    private com.squareup.okhttp.Call getComponentHistoryCall(String componentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling getComponentHistory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/history/components/{componentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "componentId" + "\\}", apiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets configuration history for a component
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param componentId The component id. (required)
     * @return ComponentHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentHistoryEntity getComponentHistory(String componentId) throws ApiException {
        ApiResponse<ComponentHistoryEntity> resp = getComponentHistoryWithHttpInfo(componentId);
        return resp.getData();
    }

    /**
     * Gets configuration history for a component
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param componentId The component id. (required)
     * @return ApiResponse&lt;ComponentHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentHistoryEntity> getComponentHistoryWithHttpInfo(String componentId) throws ApiException {
        com.squareup.okhttp.Call call = getComponentHistoryCall(componentId, null, null);
        Type localVarReturnType = new TypeToken<ComponentHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets configuration history for a component (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param componentId The component id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComponentHistoryAsync(String componentId, final ApiCallback<ComponentHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComponentHistoryCall(componentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getConnectionStatus */
    private com.squareup.okhttp.Call getConnectionStatusCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectionStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/connections/{id}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets status for a connection
     * 
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ConnectionStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionStatusEntity getConnectionStatus(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<ConnectionStatusEntity> resp = getConnectionStatusWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets status for a connection
     * 
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;ConnectionStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionStatusEntity> getConnectionStatusWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getConnectionStatusCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<ConnectionStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status for a connection (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectionStatusAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<ConnectionStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectionStatusCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getConnectionStatusHistory */
    private com.squareup.okhttp.Call getConnectionStatusHistoryCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectionStatusHistory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/connections/{id}/status/history".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the status history for a connection
     * 
     * @param id The connection id. (required)
     * @return StatusHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusHistoryEntity getConnectionStatusHistory(String id) throws ApiException {
        ApiResponse<StatusHistoryEntity> resp = getConnectionStatusHistoryWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets the status history for a connection
     * 
     * @param id The connection id. (required)
     * @return ApiResponse&lt;StatusHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusHistoryEntity> getConnectionStatusHistoryWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getConnectionStatusHistoryCall(id, null, null);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the status history for a connection (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectionStatusHistoryAsync(String id, final ApiCallback<StatusHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectionStatusHistoryCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getControllerServiceTypes */
    private com.squareup.okhttp.Call getControllerServiceTypesCall(String serviceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/controller-service-types".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (serviceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "serviceType", serviceType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves the types of controller services that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param serviceType If specified, will only return controller services of this type. (optional)
     * @return ControllerServiceTypesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerServiceTypesEntity getControllerServiceTypes(String serviceType) throws ApiException {
        ApiResponse<ControllerServiceTypesEntity> resp = getControllerServiceTypesWithHttpInfo(serviceType);
        return resp.getData();
    }

    /**
     * Retrieves the types of controller services that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param serviceType If specified, will only return controller services of this type. (optional)
     * @return ApiResponse&lt;ControllerServiceTypesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerServiceTypesEntity> getControllerServiceTypesWithHttpInfo(String serviceType) throws ApiException {
        com.squareup.okhttp.Call call = getControllerServiceTypesCall(serviceType, null, null);
        Type localVarReturnType = new TypeToken<ControllerServiceTypesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the types of controller services that this NiFi supports (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param serviceType If specified, will only return controller services of this type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getControllerServiceTypesAsync(String serviceType, final ApiCallback<ControllerServiceTypesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getControllerServiceTypesCall(serviceType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerServiceTypesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getControllerServicesFromController */
    private com.squareup.okhttp.Call getControllerServicesFromControllerCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/controller/controller-services".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets all controller services
     * 
     * @return ControllerServicesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerServicesEntity getControllerServicesFromController() throws ApiException {
        ApiResponse<ControllerServicesEntity> resp = getControllerServicesFromControllerWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets all controller services
     * 
     * @return ApiResponse&lt;ControllerServicesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerServicesEntity> getControllerServicesFromControllerWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getControllerServicesFromControllerCall(null, null);
        Type localVarReturnType = new TypeToken<ControllerServicesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all controller services (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getControllerServicesFromControllerAsync(final ApiCallback<ControllerServicesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getControllerServicesFromControllerCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerServicesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getControllerServicesFromGroup */
    private com.squareup.okhttp.Call getControllerServicesFromGroupCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getControllerServicesFromGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}/controller-services".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets all controller services
     * 
     * @param id The process group id. (required)
     * @return ControllerServicesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerServicesEntity getControllerServicesFromGroup(String id) throws ApiException {
        ApiResponse<ControllerServicesEntity> resp = getControllerServicesFromGroupWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets all controller services
     * 
     * @param id The process group id. (required)
     * @return ApiResponse&lt;ControllerServicesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerServicesEntity> getControllerServicesFromGroupWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getControllerServicesFromGroupCall(id, null, null);
        Type localVarReturnType = new TypeToken<ControllerServicesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all controller services (asynchronously)
     * 
     * @param id The process group id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getControllerServicesFromGroupAsync(String id, final ApiCallback<ControllerServicesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getControllerServicesFromGroupCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerServicesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getControllerStatus */
    private com.squareup.okhttp.Call getControllerStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/status".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the current status of this NiFi
     * 
     * @return ControllerStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerStatusEntity getControllerStatus() throws ApiException {
        ApiResponse<ControllerStatusEntity> resp = getControllerStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets the current status of this NiFi
     * 
     * @return ApiResponse&lt;ControllerStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerStatusEntity> getControllerStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getControllerStatusCall(null, null);
        Type localVarReturnType = new TypeToken<ControllerStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the current status of this NiFi (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getControllerStatusAsync(final ApiCallback<ControllerStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getControllerStatusCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCurrentUser */
    private com.squareup.okhttp.Call getCurrentUserCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/current-user".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves the user identity of the user making the request
     * 
     * @return CurrentUserEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CurrentUserEntity getCurrentUser() throws ApiException {
        ApiResponse<CurrentUserEntity> resp = getCurrentUserWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the user identity of the user making the request
     * 
     * @return ApiResponse&lt;CurrentUserEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CurrentUserEntity> getCurrentUserWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCurrentUserCall(null, null);
        Type localVarReturnType = new TypeToken<CurrentUserEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the user identity of the user making the request (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentUserAsync(final ApiCallback<CurrentUserEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentUserCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CurrentUserEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFlow */
    private com.squareup.okhttp.Call getFlowCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlow(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets a process group
     * 
     * @param id The process group id. (required)
     * @return ProcessGroupFlowEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessGroupFlowEntity getFlow(String id) throws ApiException {
        ApiResponse<ProcessGroupFlowEntity> resp = getFlowWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets a process group
     * 
     * @param id The process group id. (required)
     * @return ApiResponse&lt;ProcessGroupFlowEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessGroupFlowEntity> getFlowWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getFlowCall(id, null, null);
        Type localVarReturnType = new TypeToken<ProcessGroupFlowEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a process group (asynchronously)
     * 
     * @param id The process group id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowAsync(String id, final ApiCallback<ProcessGroupFlowEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessGroupFlowEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFlowConfig */
    private com.squareup.okhttp.Call getFlowConfigCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/config".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves the configuration for this NiFi flow
     * 
     * @return FlowConfigurationEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowConfigurationEntity getFlowConfig() throws ApiException {
        ApiResponse<FlowConfigurationEntity> resp = getFlowConfigWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the configuration for this NiFi flow
     * 
     * @return ApiResponse&lt;FlowConfigurationEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowConfigurationEntity> getFlowConfigWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getFlowConfigCall(null, null);
        Type localVarReturnType = new TypeToken<FlowConfigurationEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the configuration for this NiFi flow (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowConfigAsync(final ApiCallback<FlowConfigurationEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowConfigCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowConfigurationEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getInputPortStatus */
    private com.squareup.okhttp.Call getInputPortStatusCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInputPortStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/input-ports/{id}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets status for an input port
     * 
     * @param id The input port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return PortStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortStatusEntity getInputPortStatus(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<PortStatusEntity> resp = getInputPortStatusWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets status for an input port
     * 
     * @param id The input port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;PortStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortStatusEntity> getInputPortStatusWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getInputPortStatusCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<PortStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status for an input port (asynchronously)
     * 
     * @param id The input port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInputPortStatusAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<PortStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInputPortStatusCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOutputPortStatus */
    private com.squareup.okhttp.Call getOutputPortStatusCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOutputPortStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/output-ports/{id}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets status for an output port
     * 
     * @param id The output port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return PortStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortStatusEntity getOutputPortStatus(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<PortStatusEntity> resp = getOutputPortStatusWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets status for an output port
     * 
     * @param id The output port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;PortStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortStatusEntity> getOutputPortStatusWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getOutputPortStatusCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<PortStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status for an output port (asynchronously)
     * 
     * @param id The output port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOutputPortStatusAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<PortStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOutputPortStatusCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPrioritizers */
    private com.squareup.okhttp.Call getPrioritizersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/prioritizers".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves the types of prioritizers that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @return PrioritizerTypesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrioritizerTypesEntity getPrioritizers() throws ApiException {
        ApiResponse<PrioritizerTypesEntity> resp = getPrioritizersWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the types of prioritizers that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @return ApiResponse&lt;PrioritizerTypesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrioritizerTypesEntity> getPrioritizersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPrioritizersCall(null, null);
        Type localVarReturnType = new TypeToken<PrioritizerTypesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the types of prioritizers that this NiFi supports (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPrioritizersAsync(final ApiCallback<PrioritizerTypesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPrioritizersCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrioritizerTypesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProcessGroupStatus */
    private com.squareup.okhttp.Call getProcessGroupStatusCall(String id, Boolean recursive, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProcessGroupStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (recursive != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "recursive", recursive));
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the status for a process group
     * The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
     * @param id The process group id. (required)
     * @param recursive Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ProcessGroupStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessGroupStatusEntity getProcessGroupStatus(String id, Boolean recursive, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<ProcessGroupStatusEntity> resp = getProcessGroupStatusWithHttpInfo(id, recursive, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets the status for a process group
     * The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
     * @param id The process group id. (required)
     * @param recursive Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;ProcessGroupStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessGroupStatusEntity> getProcessGroupStatusWithHttpInfo(String id, Boolean recursive, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessGroupStatusCall(id, recursive, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<ProcessGroupStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the status for a process group (asynchronously)
     * The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
     * @param id The process group id. (required)
     * @param recursive Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessGroupStatusAsync(String id, Boolean recursive, Boolean nodewise, String clusterNodeId, final ApiCallback<ProcessGroupStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessGroupStatusCall(id, recursive, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessGroupStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProcessGroupStatusHistory */
    private com.squareup.okhttp.Call getProcessGroupStatusHistoryCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProcessGroupStatusHistory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}/status/history".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets status history for a remote process group
     * 
     * @param id The process group id. (required)
     * @return StatusHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusHistoryEntity getProcessGroupStatusHistory(String id) throws ApiException {
        ApiResponse<StatusHistoryEntity> resp = getProcessGroupStatusHistoryWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets status history for a remote process group
     * 
     * @param id The process group id. (required)
     * @return ApiResponse&lt;StatusHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusHistoryEntity> getProcessGroupStatusHistoryWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getProcessGroupStatusHistoryCall(id, null, null);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status history for a remote process group (asynchronously)
     * 
     * @param id The process group id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessGroupStatusHistoryAsync(String id, final ApiCallback<StatusHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessGroupStatusHistoryCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProcessorStatus */
    private com.squareup.okhttp.Call getProcessorStatusCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProcessorStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/processors/{id}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets status for a processor
     * 
     * @param id The processor id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ProcessorStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessorStatusEntity getProcessorStatus(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<ProcessorStatusEntity> resp = getProcessorStatusWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets status for a processor
     * 
     * @param id The processor id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;ProcessorStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessorStatusEntity> getProcessorStatusWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessorStatusCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<ProcessorStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status for a processor (asynchronously)
     * 
     * @param id The processor id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessorStatusAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<ProcessorStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessorStatusCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessorStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProcessorStatusHistory */
    private com.squareup.okhttp.Call getProcessorStatusHistoryCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProcessorStatusHistory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/processors/{id}/status/history".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets status history for a processor
     * 
     * @param id The processor id. (required)
     * @return StatusHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusHistoryEntity getProcessorStatusHistory(String id) throws ApiException {
        ApiResponse<StatusHistoryEntity> resp = getProcessorStatusHistoryWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets status history for a processor
     * 
     * @param id The processor id. (required)
     * @return ApiResponse&lt;StatusHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusHistoryEntity> getProcessorStatusHistoryWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getProcessorStatusHistoryCall(id, null, null);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status history for a processor (asynchronously)
     * 
     * @param id The processor id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessorStatusHistoryAsync(String id, final ApiCallback<StatusHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessorStatusHistoryCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProcessorTypes */
    private com.squareup.okhttp.Call getProcessorTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/processor-types".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves the types of processors that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @return ProcessorTypesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessorTypesEntity getProcessorTypes() throws ApiException {
        ApiResponse<ProcessorTypesEntity> resp = getProcessorTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the types of processors that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @return ApiResponse&lt;ProcessorTypesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessorTypesEntity> getProcessorTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getProcessorTypesCall(null, null);
        Type localVarReturnType = new TypeToken<ProcessorTypesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the types of processors that this NiFi supports (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessorTypesAsync(final ApiCallback<ProcessorTypesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessorTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessorTypesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRemoteProcessGroupStatus */
    private com.squareup.okhttp.Call getRemoteProcessGroupStatusCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRemoteProcessGroupStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/remote-process-groups/{id}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets status for a remote process group
     * 
     * @param id The remote process group id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ProcessorStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessorStatusEntity getRemoteProcessGroupStatus(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<ProcessorStatusEntity> resp = getRemoteProcessGroupStatusWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets status for a remote process group
     * 
     * @param id The remote process group id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;ProcessorStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessorStatusEntity> getRemoteProcessGroupStatusWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getRemoteProcessGroupStatusCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<ProcessorStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status for a remote process group (asynchronously)
     * 
     * @param id The remote process group id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRemoteProcessGroupStatusAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<ProcessorStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRemoteProcessGroupStatusCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessorStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRemoteProcessGroupStatusHistory */
    private com.squareup.okhttp.Call getRemoteProcessGroupStatusHistoryCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRemoteProcessGroupStatusHistory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/remote-process-groups/{id}/status/history".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the status history
     * 
     * @param id The remote process group id. (required)
     * @return StatusHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusHistoryEntity getRemoteProcessGroupStatusHistory(String id) throws ApiException {
        ApiResponse<StatusHistoryEntity> resp = getRemoteProcessGroupStatusHistoryWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets the status history
     * 
     * @param id The remote process group id. (required)
     * @return ApiResponse&lt;StatusHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusHistoryEntity> getRemoteProcessGroupStatusHistoryWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getRemoteProcessGroupStatusHistoryCall(id, null, null);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the status history (asynchronously)
     * 
     * @param id The remote process group id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRemoteProcessGroupStatusHistoryAsync(String id, final ApiCallback<StatusHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRemoteProcessGroupStatusHistoryCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getReportingTaskTypes */
    private com.squareup.okhttp.Call getReportingTaskTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/reporting-task-types".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves the types of reporting tasks that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @return ReportingTaskTypesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportingTaskTypesEntity getReportingTaskTypes() throws ApiException {
        ApiResponse<ReportingTaskTypesEntity> resp = getReportingTaskTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the types of reporting tasks that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @return ApiResponse&lt;ReportingTaskTypesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportingTaskTypesEntity> getReportingTaskTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getReportingTaskTypesCall(null, null);
        Type localVarReturnType = new TypeToken<ReportingTaskTypesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the types of reporting tasks that this NiFi supports (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportingTaskTypesAsync(final ApiCallback<ReportingTaskTypesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportingTaskTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportingTaskTypesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getReportingTasks */
    private com.squareup.okhttp.Call getReportingTasksCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/reporting-tasks".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets all reporting tasks
     * 
     * @return ReportingTasksEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportingTasksEntity getReportingTasks() throws ApiException {
        ApiResponse<ReportingTasksEntity> resp = getReportingTasksWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets all reporting tasks
     * 
     * @return ApiResponse&lt;ReportingTasksEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportingTasksEntity> getReportingTasksWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getReportingTasksCall(null, null);
        Type localVarReturnType = new TypeToken<ReportingTasksEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all reporting tasks (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportingTasksAsync(final ApiCallback<ReportingTasksEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportingTasksCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportingTasksEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTemplates */
    private com.squareup.okhttp.Call getTemplatesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/templates".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets all templates
     * 
     * @return TemplatesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemplatesEntity getTemplates() throws ApiException {
        ApiResponse<TemplatesEntity> resp = getTemplatesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets all templates
     * 
     * @return ApiResponse&lt;TemplatesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemplatesEntity> getTemplatesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTemplatesCall(null, null);
        Type localVarReturnType = new TypeToken<TemplatesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all templates (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTemplatesAsync(final ApiCallback<TemplatesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTemplatesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemplatesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for queryHistory */
    private com.squareup.okhttp.Call queryHistoryCall(String offset, String count, String sortColumn, String sortOrder, String startDate, String endDate, String userIdentity, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling queryHistory(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling queryHistory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/history".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (sortColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortColumn", sortColumn));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortOrder", sortOrder));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endDate", endDate));
        if (userIdentity != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userIdentity", userIdentity));
        if (sourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceId", sourceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets configuration history
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param offset The offset into the result set. (required)
     * @param count The number of actions to return. (required)
     * @param sortColumn The field to sort on. (optional)
     * @param sortOrder The direction to sort. (optional)
     * @param startDate Include actions after this date. (optional)
     * @param endDate Include actions before this date. (optional)
     * @param userIdentity Include actions performed by this user. (optional)
     * @param sourceId Include actions on this component. (optional)
     * @return HistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HistoryEntity queryHistory(String offset, String count, String sortColumn, String sortOrder, String startDate, String endDate, String userIdentity, String sourceId) throws ApiException {
        ApiResponse<HistoryEntity> resp = queryHistoryWithHttpInfo(offset, count, sortColumn, sortOrder, startDate, endDate, userIdentity, sourceId);
        return resp.getData();
    }

    /**
     * Gets configuration history
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param offset The offset into the result set. (required)
     * @param count The number of actions to return. (required)
     * @param sortColumn The field to sort on. (optional)
     * @param sortOrder The direction to sort. (optional)
     * @param startDate Include actions after this date. (optional)
     * @param endDate Include actions before this date. (optional)
     * @param userIdentity Include actions performed by this user. (optional)
     * @param sourceId Include actions on this component. (optional)
     * @return ApiResponse&lt;HistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HistoryEntity> queryHistoryWithHttpInfo(String offset, String count, String sortColumn, String sortOrder, String startDate, String endDate, String userIdentity, String sourceId) throws ApiException {
        com.squareup.okhttp.Call call = queryHistoryCall(offset, count, sortColumn, sortOrder, startDate, endDate, userIdentity, sourceId, null, null);
        Type localVarReturnType = new TypeToken<HistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets configuration history (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param offset The offset into the result set. (required)
     * @param count The number of actions to return. (required)
     * @param sortColumn The field to sort on. (optional)
     * @param sortOrder The direction to sort. (optional)
     * @param startDate Include actions after this date. (optional)
     * @param endDate Include actions before this date. (optional)
     * @param userIdentity Include actions performed by this user. (optional)
     * @param sourceId Include actions on this component. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryHistoryAsync(String offset, String count, String sortColumn, String sortOrder, String startDate, String endDate, String userIdentity, String sourceId, final ApiCallback<HistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryHistoryCall(offset, count, sortColumn, sortOrder, startDate, endDate, userIdentity, sourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for scheduleComponents */
    private com.squareup.okhttp.Call scheduleComponentsCall(String id, ScheduleComponentsEntity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scheduleComponents(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling scheduleComponents(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Schedule or unschedule comopnents in the specified Process Group.
     * 
     * @param id The process group id. (required)
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @return ScheduleComponentsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScheduleComponentsEntity scheduleComponents(String id, ScheduleComponentsEntity body) throws ApiException {
        ApiResponse<ScheduleComponentsEntity> resp = scheduleComponentsWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * Schedule or unschedule comopnents in the specified Process Group.
     * 
     * @param id The process group id. (required)
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @return ApiResponse&lt;ScheduleComponentsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScheduleComponentsEntity> scheduleComponentsWithHttpInfo(String id, ScheduleComponentsEntity body) throws ApiException {
        com.squareup.okhttp.Call call = scheduleComponentsCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<ScheduleComponentsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Schedule or unschedule comopnents in the specified Process Group. (asynchronously)
     * 
     * @param id The process group id. (required)
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduleComponentsAsync(String id, ScheduleComponentsEntity body, final ApiCallback<ScheduleComponentsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduleComponentsCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScheduleComponentsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchCluster */
    private com.squareup.okhttp.Call searchClusterCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchCluster(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flow/cluster/search-results".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Searches the cluster for a node with the specified address
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param q Node address to search for. (required)
     * @return ClusterSearchResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterSearchResultsEntity searchCluster(String q) throws ApiException {
        ApiResponse<ClusterSearchResultsEntity> resp = searchClusterWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * Searches the cluster for a node with the specified address
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param q Node address to search for. (required)
     * @return ApiResponse&lt;ClusterSearchResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterSearchResultsEntity> searchClusterWithHttpInfo(String q) throws ApiException {
        com.squareup.okhttp.Call call = searchClusterCall(q, null, null);
        Type localVarReturnType = new TypeToken<ClusterSearchResultsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches the cluster for a node with the specified address (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     * @param q Node address to search for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchClusterAsync(String q, final ApiCallback<ClusterSearchResultsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchClusterCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterSearchResultsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchFlow */
    private com.squareup.okhttp.Call searchFlowCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/flow/search-results".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Performs a search against this NiFi using the specified search term
     * Only search results from authorized components will be returned.
     * @param q  (optional)
     * @return SearchResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResultsEntity searchFlow(String q) throws ApiException {
        ApiResponse<SearchResultsEntity> resp = searchFlowWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * Performs a search against this NiFi using the specified search term
     * Only search results from authorized components will be returned.
     * @param q  (optional)
     * @return ApiResponse&lt;SearchResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResultsEntity> searchFlowWithHttpInfo(String q) throws ApiException {
        com.squareup.okhttp.Call call = searchFlowCall(q, null, null);
        Type localVarReturnType = new TypeToken<SearchResultsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Performs a search against this NiFi using the specified search term (asynchronously)
     * Only search results from authorized components will be returned.
     * @param q  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchFlowAsync(String q, final ApiCallback<SearchResultsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchFlowCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResultsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
