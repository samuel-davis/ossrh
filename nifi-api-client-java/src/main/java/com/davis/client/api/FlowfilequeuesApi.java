/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.davis.client.api;

import com.davis.client.ApiCallback;
import com.davis.client.ApiClient;
import com.davis.client.ApiException;
import com.davis.client.ApiResponse;
import com.davis.client.Configuration;
import com.davis.client.Pair;
import com.davis.client.ProgressRequestBody;
import com.davis.client.ProgressResponseBody;

import com.davis.client.model.DropRequestEntity;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.davis.client.model.ListingRequestEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlowfilequeuesApi {
    private ApiClient apiClient;

    public FlowfilequeuesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlowfilequeuesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createDropRequest */
    private com.squareup.okhttp.Call createDropRequestCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws
            ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createDropRequest(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flowfile-queues/{id}/drop-requests".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates a request to drop the contents of the queue in this connection.
     * 
     * @param id The connection id. (required)
     * @return DropRequestEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DropRequestEntity createDropRequest(String id) throws ApiException {
        ApiResponse<DropRequestEntity> resp = createDropRequestWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Creates a request to drop the contents of the queue in this connection.
     * 
     * @param id The connection id. (required)
     * @return ApiResponse&lt;DropRequestEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DropRequestEntity> createDropRequestWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = createDropRequestCall(id, null, null);
        Type localVarReturnType = new TypeToken<DropRequestEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a request to drop the contents of the queue in this connection. (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDropRequestAsync(String id, final ApiCallback<DropRequestEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDropRequestCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DropRequestEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createFlowFileListing */
    private com.squareup.okhttp.Call createFlowFileListingCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createFlowFileListing(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flowfile-queues/{id}/listing-requests".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists the contents of the queue in this connection.
     * 
     * @param id The connection id. (required)
     * @return ListingRequestEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListingRequestEntity createFlowFileListing(String id) throws ApiException {
        ApiResponse<ListingRequestEntity> resp = createFlowFileListingWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Lists the contents of the queue in this connection.
     * 
     * @param id The connection id. (required)
     * @return ApiResponse&lt;ListingRequestEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListingRequestEntity> createFlowFileListingWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = createFlowFileListingCall(id, null, null);
        Type localVarReturnType = new TypeToken<ListingRequestEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists the contents of the queue in this connection. (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFlowFileListingAsync(String id, final ApiCallback<ListingRequestEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFlowFileListingCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListingRequestEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteListingRequest */
    private com.squareup.okhttp.Call deleteListingRequestCall(String id, String listingRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteListingRequest(Async)");
        }
        
        // verify the required parameter 'listingRequestId' is set
        if (listingRequestId == null) {
            throw new ApiException("Missing the required parameter 'listingRequestId' when calling deleteListingRequest(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flowfile-queues/{id}/listing-requests/{listing-request-id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "listing-request-id" + "\\}", apiClient.escapeString(listingRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancels and/or removes a request to list the contents of this connection.
     * 
     * @param id The connection id. (required)
     * @param listingRequestId The listing request id. (required)
     * @return DropRequestEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DropRequestEntity deleteListingRequest(String id, String listingRequestId) throws ApiException {
        ApiResponse<DropRequestEntity> resp = deleteListingRequestWithHttpInfo(id, listingRequestId);
        return resp.getData();
    }

    /**
     * Cancels and/or removes a request to list the contents of this connection.
     * 
     * @param id The connection id. (required)
     * @param listingRequestId The listing request id. (required)
     * @return ApiResponse&lt;DropRequestEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DropRequestEntity> deleteListingRequestWithHttpInfo(String id, String listingRequestId) throws ApiException {
        com.squareup.okhttp.Call call = deleteListingRequestCall(id, listingRequestId, null, null);
        Type localVarReturnType = new TypeToken<DropRequestEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancels and/or removes a request to list the contents of this connection. (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param listingRequestId The listing request id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteListingRequestAsync(String id, String listingRequestId, final ApiCallback<DropRequestEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteListingRequestCall(id, listingRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DropRequestEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for downloadFlowFileContent */
    private com.squareup.okhttp.Call downloadFlowFileContentCall(String id, String flowfileUuid, String clientId, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadFlowFileContent(Async)");
        }
        
        // verify the required parameter 'flowfileUuid' is set
        if (flowfileUuid == null) {
            throw new ApiException("Missing the required parameter 'flowfileUuid' when calling downloadFlowFileContent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "flowfile-uuid" + "\\}", apiClient.escapeString(flowfileUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clientId", clientId));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the content for a FlowFile in a Connection.
     * 
     * @param id The connection id. (required)
     * @param flowfileUuid The flowfile uuid. (required)
     * @param clientId If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)
     * @param clusterNodeId The id of the node where the content exists if clustered. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void downloadFlowFileContent(String id, String flowfileUuid, String clientId, String clusterNodeId) throws ApiException {
        downloadFlowFileContentWithHttpInfo(id, flowfileUuid, clientId, clusterNodeId);
    }

    /**
     * Gets the content for a FlowFile in a Connection.
     * 
     * @param id The connection id. (required)
     * @param flowfileUuid The flowfile uuid. (required)
     * @param clientId If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)
     * @param clusterNodeId The id of the node where the content exists if clustered. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> downloadFlowFileContentWithHttpInfo(String id, String flowfileUuid, String clientId, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = downloadFlowFileContentCall(id, flowfileUuid, clientId, clusterNodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Gets the content for a FlowFile in a Connection. (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param flowfileUuid The flowfile uuid. (required)
     * @param clientId If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)
     * @param clusterNodeId The id of the node where the content exists if clustered. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFlowFileContentAsync(String id, String flowfileUuid, String clientId, String clusterNodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFlowFileContentCall(id, flowfileUuid, clientId, clusterNodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getDropRequest */
    private com.squareup.okhttp.Call getDropRequestCall(String id, String dropRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDropRequest(Async)");
        }
        
        // verify the required parameter 'dropRequestId' is set
        if (dropRequestId == null) {
            throw new ApiException("Missing the required parameter 'dropRequestId' when calling getDropRequest(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flowfile-queues/{id}/drop-requests/{drop-request-id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "drop-request-id" + "\\}", apiClient.escapeString(dropRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the current status of a drop request for the specified connection.
     * 
     * @param id The connection id. (required)
     * @param dropRequestId The drop request id. (required)
     * @return DropRequestEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DropRequestEntity getDropRequest(String id, String dropRequestId) throws ApiException {
        ApiResponse<DropRequestEntity> resp = getDropRequestWithHttpInfo(id, dropRequestId);
        return resp.getData();
    }

    /**
     * Gets the current status of a drop request for the specified connection.
     * 
     * @param id The connection id. (required)
     * @param dropRequestId The drop request id. (required)
     * @return ApiResponse&lt;DropRequestEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DropRequestEntity> getDropRequestWithHttpInfo(String id, String dropRequestId) throws ApiException {
        com.squareup.okhttp.Call call = getDropRequestCall(id, dropRequestId, null, null);
        Type localVarReturnType = new TypeToken<DropRequestEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the current status of a drop request for the specified connection. (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param dropRequestId The drop request id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDropRequestAsync(String id, String dropRequestId, final ApiCallback<DropRequestEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDropRequestCall(id, dropRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DropRequestEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFlowFile */
    private com.squareup.okhttp.Call getFlowFileCall(String id, String flowfileUuid, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlowFile(Async)");
        }
        
        // verify the required parameter 'flowfileUuid' is set
        if (flowfileUuid == null) {
            throw new ApiException("Missing the required parameter 'flowfileUuid' when calling getFlowFile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flowfile-queues/{id}/flowfiles/{flowfile-uuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "flowfile-uuid" + "\\}", apiClient.escapeString(flowfileUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets a FlowFile from a Connection.
     * 
     * @param id The connection id. (required)
     * @param flowfileUuid The flowfile uuid. (required)
     * @param clusterNodeId The id of the node where the content exists if clustered. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFlowFile(String id, String flowfileUuid, String clusterNodeId) throws ApiException {
        getFlowFileWithHttpInfo(id, flowfileUuid, clusterNodeId);
    }

    /**
     * Gets a FlowFile from a Connection.
     * 
     * @param id The connection id. (required)
     * @param flowfileUuid The flowfile uuid. (required)
     * @param clusterNodeId The id of the node where the content exists if clustered. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFlowFileWithHttpInfo(String id, String flowfileUuid, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getFlowFileCall(id, flowfileUuid, clusterNodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Gets a FlowFile from a Connection. (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param flowfileUuid The flowfile uuid. (required)
     * @param clusterNodeId The id of the node where the content exists if clustered. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowFileAsync(String id, String flowfileUuid, String clusterNodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowFileCall(id, flowfileUuid, clusterNodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getListingRequest */
    private com.squareup.okhttp.Call getListingRequestCall(String id, String listingRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getListingRequest(Async)");
        }
        
        // verify the required parameter 'listingRequestId' is set
        if (listingRequestId == null) {
            throw new ApiException("Missing the required parameter 'listingRequestId' when calling getListingRequest(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flowfile-queues/{id}/listing-requests/{listing-request-id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "listing-request-id" + "\\}", apiClient.escapeString(listingRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the current status of a listing request for the specified connection.
     * 
     * @param id The connection id. (required)
     * @param listingRequestId The listing request id. (required)
     * @return ListingRequestEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListingRequestEntity getListingRequest(String id, String listingRequestId) throws ApiException {
        ApiResponse<ListingRequestEntity> resp = getListingRequestWithHttpInfo(id, listingRequestId);
        return resp.getData();
    }

    /**
     * Gets the current status of a listing request for the specified connection.
     * 
     * @param id The connection id. (required)
     * @param listingRequestId The listing request id. (required)
     * @return ApiResponse&lt;ListingRequestEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListingRequestEntity> getListingRequestWithHttpInfo(String id, String listingRequestId) throws ApiException {
        com.squareup.okhttp.Call call = getListingRequestCall(id, listingRequestId, null, null);
        Type localVarReturnType = new TypeToken<ListingRequestEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the current status of a listing request for the specified connection. (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param listingRequestId The listing request id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListingRequestAsync(String id, String listingRequestId, final ApiCallback<ListingRequestEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListingRequestCall(id, listingRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListingRequestEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeDropRequest */
    private com.squareup.okhttp.Call removeDropRequestCall(String id, String dropRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeDropRequest(Async)");
        }
        
        // verify the required parameter 'dropRequestId' is set
        if (dropRequestId == null) {
            throw new ApiException("Missing the required parameter 'dropRequestId' when calling removeDropRequest(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/flowfile-queues/{id}/drop-requests/{drop-request-id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "drop-request-id" + "\\}", apiClient.escapeString(dropRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancels and/or removes a request to drop the contents of this connection.
     * 
     * @param id The connection id. (required)
     * @param dropRequestId The drop request id. (required)
     * @return DropRequestEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DropRequestEntity removeDropRequest(String id, String dropRequestId) throws ApiException {
        ApiResponse<DropRequestEntity> resp = removeDropRequestWithHttpInfo(id, dropRequestId);
        return resp.getData();
    }

    /**
     * Cancels and/or removes a request to drop the contents of this connection.
     * 
     * @param id The connection id. (required)
     * @param dropRequestId The drop request id. (required)
     * @return ApiResponse&lt;DropRequestEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DropRequestEntity> removeDropRequestWithHttpInfo(String id, String dropRequestId) throws ApiException {
        com.squareup.okhttp.Call call = removeDropRequestCall(id, dropRequestId, null, null);
        Type localVarReturnType = new TypeToken<DropRequestEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancels and/or removes a request to drop the contents of this connection. (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param dropRequestId The drop request id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDropRequestAsync(String id, String dropRequestId, final ApiCallback<DropRequestEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDropRequestCall(id, dropRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DropRequestEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
