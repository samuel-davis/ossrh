/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.davis.client.api;

import com.davis.client.ApiException;

import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FlowfilequeuesApi
 */
public class FlowfilequeuesApiTest {

    private final FlowfilequeuesApi api = new FlowfilequeuesApi();

    
    /**
     * Creates a request to drop the contents of the queue in this connection.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDropRequestTest() throws ApiException {
        String id = null;
        // DropRequestEntity response = api.createDropRequest(id);

        // TODO: test validations
    }
    
    /**
     * Lists the contents of the queue in this connection.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFlowFileListingTest() throws ApiException {
        String id = null;
        // ListingRequestEntity response = api.createFlowFileListing(id);

        // TODO: test validations
    }
    
    /**
     * Cancels and/or removes a request to list the contents of this connection.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteListingRequestTest() throws ApiException {
        String id = null;
        String listingRequestId = null;
        // DropRequestEntity response = api.deleteListingRequest(id, listingRequestId);

        // TODO: test validations
    }
    
    /**
     * Gets the content for a FlowFile in a Connection.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFlowFileContentTest() throws ApiException {
        String id = null;
        String flowfileUuid = null;
        String clientId = null;
        String clusterNodeId = null;
        // api.downloadFlowFileContent(id, flowfileUuid, clientId, clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * Gets the current status of a drop request for the specified connection.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDropRequestTest() throws ApiException {
        String id = null;
        String dropRequestId = null;
        // DropRequestEntity response = api.getDropRequest(id, dropRequestId);

        // TODO: test validations
    }
    
    /**
     * Gets a FlowFile from a Connection.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowFileTest() throws ApiException {
        String id = null;
        String flowfileUuid = null;
        String clusterNodeId = null;
        // api.getFlowFile(id, flowfileUuid, clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * Gets the current status of a listing request for the specified connection.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListingRequestTest() throws ApiException {
        String id = null;
        String listingRequestId = null;
        // ListingRequestEntity response = api.getListingRequest(id, listingRequestId);

        // TODO: test validations
    }
    
    /**
     * Cancels and/or removes a request to drop the contents of this connection.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeDropRequestTest() throws ApiException {
        String id = null;
        String dropRequestId = null;
        // DropRequestEntity response = api.removeDropRequest(id, dropRequestId);

        // TODO: test validations
    }
    
}
